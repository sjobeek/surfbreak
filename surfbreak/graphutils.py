# AUTOGENERATED! DO NOT EDIT! File to edit: 04_graph_utilities.ipynb (unless otherwise specified).

__all__ = ['graph_entry_to_string', 'describe_graph', 'short_func_label', 'full_func_label', 'func_node_name',
           'to_digraph', 'digraph_to_png', 'visualize']

# Cell
import inspect
def graph_entry_to_string(graph_entry):
    func = graph_entry[0]
    argument_keys = list(inspect.signature(func).parameters.keys())
    return func.__module__.split('.')[-1] + "." + func.__name__ + "(" +\
           ", ".join(argument_keys[arg_idx] +"="+ arg.__repr__() for arg_idx, arg in enumerate(graph_entry[1:])) + ")"

def describe_graph(dask_graph):
    graph_description = {key: graph_entry_to_string(dask_graph[key])
                         for key in dask_graph.keys()}
    return graph_description


# Cell
import graphviz
import pprint
import dask
from dask.dot import graphviz_to_file
import numpy as np
import pandas as pd
import inspect


def short_func_label(func):
    return func.__name__

def full_func_label(func, daskgraph_entry):
    args_repr = []
    for arg in daskgraph_entry[1:]:
        if isinstance(arg, np.ndarray):
            args_repr.append("ndarray " + arg.shape.__repr__())
        elif isinstance(arg, pd.core.frame.DataFrame):
            args_repr.append("DataFrame")
        elif isinstance(arg, pd.core.series.Series):
            args_repr.append("Series")
        else:
            args_repr.append(arg)

    # Ugly....  build up a string that replicates a normal python function call signature,
    # dealing with all of graphviz's wonkyness (like \l for left-justified newlines...)
    func_signature_segments = str(inspect.signature(func)).__repr__()[1:-1].split(', ')
    func_signature_string = ""
    cumulative_funcsig_len = len(func.__name__) + 1
    for segment in func_signature_segments:
        cumulative_funcsig_len += len(segment)
        if cumulative_funcsig_len > 50:
            cumulative_funcsig_len = 0
            if segment[-1] == ")":
                func_signature_string += segment + "   "
            else:
                func_signature_string += segment + ",\l" + 8*" "
        else:
            func_signature_string += segment + ",  "

    func_string_with_signature = func.__name__  + func_signature_string[:-3]
    args_string = pprint.pformat(tuple(args_repr), indent=4)
    # In raw graphviz labels, '\l' indicates a newline with the previous-line left-justified (\n is centered)
    return func_string_with_signature + "\l" + args_string


def func_node_name(func, key):
    return short_func_label(func) + "_" + key


def to_digraph(daskgraph, data_attr={}, func_attr={}, graph_attr={"rankdir":"LR"}, short_labels=False):
    g = graphviz.Digraph(graph_attr=graph_attr)

    deps_dict = {k: dask.core.get_dependencies(daskgraph, k) for k in daskgraph}

    for k_name in deps_dict.keys():
        # Set up dask output nodes
        Dattrs = data_attr.get(k_name, {})
        Dattrs.setdefault("label", k_name)
        Dattrs.setdefault("shape", "box")
        g.node(k_name, **Dattrs)

        # Set up function nodes
        func = daskgraph[k_name][0]
        func_name = func_node_name(func, k_name)
        if short_labels:
            func_label = short_func_label(func)
        else:
            func_label = full_func_label(func, daskgraph[k_name])

        Fattrs = func_attr.get(k_name, {})
        Fattrs.setdefault("label", func_label)
        Fattrs.setdefault("shape", "ellipse")
        g.node(func_name, **Fattrs)

        g.edge(func_name, k_name)


    for k_name, deps in deps_dict.items():
        func = daskgraph[k_name][0]
        for dep in deps:
            dep_name = str(dep)
            g.edge(dep_name, func_node_name(func, k_name))
    return g

def digraph_to_png(digraph):
    return graphviz_to_file(digraph, None, 'png')

def visualize(daskgraph, short_labels=False, rankdir=None):
    if short_labels is True and rankdir is None:
        rankdir="UD"
    elif rankdir is None:
        rankdir="LR"
    return digraph_to_png(to_digraph(daskgraph, short_labels=short_labels,
                                    graph_attr={"rankdir":rankdir}))